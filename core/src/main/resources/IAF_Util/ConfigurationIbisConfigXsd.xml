<module>
	<adapter name="IbisConfigXsd" active="${ibisConfigXsd.active}">
		<receiver
			name="IbisConfigXsd"
			className="nl.nn.adapterframework.receivers.GenericReceiver"
			>
			<listener
				name="IbisConfigXsd"
				className="nl.nn.adapterframework.receivers.JavaListener"
				serviceName="IbisConfigXsd"
			/>
		</receiver>
		<pipeline firstPipe="IbisConfigXsd">		
			<pipe
				name="IbisConfigXsd" className="nl.nn.adapterframework.pipes.XmlSwitch"
				getInputFromFixedValue="&lt;dummy/&gt;"
				xpathExpression="lookupConfigDir != '' and lookupConfigDir != '&lt;dummy/&gt;'">
				
				<param name="lookupConfigDir" value="${configurations.directory}"/>
			
				<forward name="true" path="EXIT" />
				<forward name="false" path="EchoDir" />
			</pipe>
			<pipe
				name="EchoDir"
				className="nl.nn.adapterframework.pipes.FixedResult"
				returnString="${configurations.directory}">
				
				<forward name="success" path="ReadDirForIbisdoc"/>
			</pipe>
			<pipe 
				name="ReadDirForIbisdoc" className="nl.nn.adapterframework.pipes.FilePipe" 
				actions="list"
				fileName="ibisconfig-${ibis-adapterframework-core.version}.xsd"
				directory="${configurations.directory}"
				storeResultInSessionKey="dirContentIbisdoc">
								
				<forward name="success" path="CheckIbisdocExists" />
			</pipe>
			<pipe
				name="CheckIbisdocExists" className="nl.nn.adapterframework.pipes.XmlSwitch"
				xpathExpression="directory/@count > 0">
			
				<forward name="true" path="ReadDirForIgnore" />
				<forward name="false" path="GetXSDContent" />
			</pipe>
			<pipe
				name="GetXSDContent" className="nl.nn.adapterframework.doc.IbisDocPipe"
				returnXSD="true"
				storeResultInSessionKey="ibisdocContent">
				
				<param name="uri" value="/ibisdoc/ibisdoc.xsd" />
				<forward name="success" path="CreateIbisdoc"/>
			</pipe>
			<pipe
				name="CreateIbisdoc" className="nl.nn.adapterframework.pipes.FilePipe"
				getInputFromSessionKey="ibisdocContent"
				actions="write"
				fileName="ibisconfig-${ibis-adapterframework-core.version}.xsd"
				directory="${configurations.directory}">
					
				<forward name="success" path="ReadDirForIgnore"/>
			</pipe>
			<pipe 
				name="ReadDirForIgnore" className="nl.nn.adapterframework.pipes.FilePipe" 
				actions="list"
				fileName=".gitignore"
				directory="${configurations.directory}"
				storeResultInSessionKey="dirContentIgnore">
								
				<forward name="success" path="CheckIgnoreExists" />
			</pipe>
			<pipe
				name="CheckIgnoreExists" className="nl.nn.adapterframework.pipes.XmlSwitch"
				getInpurFromFixedValue=".gitignore"
				xpathExpression="directory/@count > 0">
			
				<forward name="true" path="echoSucces" />
				<forward name="false" path="CreateIgnore" />
			</pipe>
			<pipe
				name="CreateIgnore" className="nl.nn.adapterframework.pipes.FilePipe"
				getInputFromFixedValue="ibisdoc-*.xsd"
				actions="write"
				fileName=".gitignore"
				directory="${configurations.directory}">
				
				<forward name="success" path="EXIT"/>
			</pipe>
			<pipe
				name="echoSucces" className="nl.nn.adapterframework.pipes.EchoPipe">
				
				<forward name="success" path="EXIT"/>
			</pipe>
			<exits>
				<exit path="EXIT" state="success" />
			</exits>
		</pipeline>
	</adapter>
	<scheduler>
		<job
			name="IbisConfigXsd"
			adapterName="IbisConfigXsd"
			receiverName="IbisConfigXsd"
			interval="0"
			function="sendMessage"
			active="${ibisConfigXsd.job.active}"
		/>
	</scheduler>
</module>
